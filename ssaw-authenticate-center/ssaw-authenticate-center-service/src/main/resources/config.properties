// 获取客户端配置
SpringSummerAutumnWinterManageProperties manageProperties = ApplicationContextUtil.getBean(SpringSummerAutumnWinterManageProperties.class);
JwtAccessTokenConverter jwtAccessTokenConverter = ApplicationContextUtil.getBean(JwtAccessTokenConverter.class);



/*
* DefaultOauth2AccessToken
* DefaultOAuth2AccessToken token = new DefaultOAuth2AccessToken(UUID.randomUUID().toString());
* token.setExpiration(new Date(System.currentTimeMillis() + manageProperties.getClientExpire() * 1000));
* token.setTokenType(ClientConstant.BEARER);
* */
/*
token.setScope(scope);

// Oauth2Authentication
String clientId = manageProperties.getClientId().concat(userDetails.getUsername());
Map<String, String> requestParameters = new HashMap<>(6);
requestParameters.put("code", UUID.randomUUID().toString());
requestParameters.put("grant_type", ClientConstant.AuthorizedGrantTypes.AUTHORIZATION_CODE.getValue());
requestParameters.put("client_id", clientId);
requestParameters.put("client_secret", manageProperties.getClientSecret());
requestParameters.put("redirect_uri", manageProperties.getClientRegisteredRedirectUris());
requestParameters.put("response_type", "code");

OAuth2Request oAuth2Request = new OAuth2Request(requestParameters, clientId, CollectionUtils.emptyCollection(), true,
scope, resourceIds, manageProperties.getClientRegisteredRedirectUris(), ClientConstant.CODE, new HashMap<>(0));

UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

OAuth2Authentication oAuth2Authentication = new OAuth2Authentication(oAuth2Request, usernamePasswordAuthenticationToken);
oAuth2Authentication.setAuthenticated(true);

OAuth2AccessToken enhance = jwtAccessTokenConverter.enhance(token, oAuth2Authentication);

// 移除旧Token
RedisTokenStore redisTokenStore = ApplicationContextUtil.getBean(RedisTokenStore.class);
Collection<OAuth2AccessToken> oldTokens = redisTokenStore.findTokensByClientId(clientId);
oldTokens.forEach(redisTokenStore::removeAccessToken);
redisTokenStore.storeAccessToken(enhance, oAuth2Authentication);
*/